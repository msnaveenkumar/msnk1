package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JsonUtility_MS {

    public static void main(String[] args) {
        // JSON as a string input
        String jsonString = "{ \"datasets\": [ { \"name\": \"SDC Dataset Element PSD_02\", \"description\": \"Testing Description in RightContainer SDH\", \"format\": \"JSON\", \"boundaries\": [ { \"frontToBack\": [ \"Asset Management\" ] } ], \"dgcDataDomains\": { \"FRM DGC Glossary\": [ { \"domainName\": \"Analytics\" } ] }, \"reports\": [ { \"catalogId\": \"91b18e2e-7656-4d6e-90d9-667eb04b6e27\" } ], \"upstreamDatasets\": [ { \"name\": \"DS_1503_932\", \"producerEonId\": 932 } ], \"datasetElements\": [ { \"name\": \"SDC Dataset Elements PSD_01\", \"reportAttributes\": [ { \"catalogId\": \"e1c336aa-2d99-458d-bc70-d5d25542c739\" }, { \"catalogId\": \"6b11237a-7a30-4f1c-91d2-0fe0d635eaec\" } ], \"upstreamDatasetElements\": [ { \"datasetEonId\": 932, \"datasetElementName\": \"DS_1503_932\", \"datasetElementNames\": [ \"DS_WAR\" ] } ] } ] }, { \"name\": \"SDC Dataset Element PSD_03\", \"description\": \"Testing Description in RightContainer SDH1\", \"format\": \"JSON1\", \"boundaries\": [ { \"frontToBack\": [ \"Asset Management1\" ] } ], \"dgcDataDomains\": { \"FRM DGC Glossary\": [ { \"domainName\": \"Analytics1\" } ] }, \"reports\": [ { \"catalogId\": \"91b18e2e-7656-4d6e-90d9-667eb04b6e271\" } ], \"upstreamDatasets\": [ { \"name\": \"DS_1503_9321\", \"producerEonId\": 9322 } ], \"datasetElements\": [ { \"name\": \"SDC Dataset Elements PSD_03\", \"reportAttributes\": [ { \"catalogId\": \"e1c336aa-2d99-458d-bc70-d5d25542c7313\" }, { \"catalogId\": \"6b11237a-7a30-4f1c-91d2-0fe0d635eaec3\" } ], \"upstreamDatasetElements\": [ { \"datasetEonId\": 9323, \"datasetElementName\": \"DS_1503_9323\", \"datasetElementNames\": [ \"DS_WARr\" ] } ] } ] } ] }";

        try {
            // Parse the JSON string
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(jsonString);

            // Create an instance of JsonUtility_MS to call the methods
            JsonUtility_MS jsonUtility = new JsonUtility_MS();

            // Test methods for extracting various values
            List<String> domainNames = jsonUtility.extractRecursiveValuesByKey(rootNode, "domainName");
            System.out.println("Domain Names: " + domainNames); // Output: ["Analytics", "Analytics1"]

            List<String> datasetElementNames = jsonUtility.extractNestedValues(rootNode, "$..upstreamDatasetElements[0].datasetElementNames[0]");
            System.out.println("Dataset Element Names: " + datasetElementNames); // Output: ["DS_WAR", "DS_WARr"]

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Extracts all values recursively from the given JSON node for the specified key.
     * This method is used to handle JSON paths like $...domainName.
     *
     * @param rootNode the root JSON node
     * @param key      the key to recursively search for (e.g., "domainName")
     * @return a list of values found for the specified key
     */
    public List<String> extractRecursiveValuesByKey(JsonNode rootNode, String key) {
        List<String> result = new ArrayList<>();
        recursiveSearch(rootNode, key, result);
        return result;
    }

    /**
     * Recursively searches through the JSON structure and adds values with the matching key to the result list.
     *
     * @param node   the current JSON node being searched
     * @param key    the key to match
     * @param result the list of values matching the key
     */
    private void recursiveSearch(JsonNode node, String key, List<String> result) {
        if (node.isObject()) {
            Iterator<String> fieldNames = node.fieldNames();
            while (fieldNames.hasNext()) {
                String fieldName = fieldNames.next();
                JsonNode childNode = node.get(fieldName);

                if (fieldName.equals(key) && childNode.isValueNode()) {
                    result.add(childNode.asText());
                } else {
                    recursiveSearch(childNode, key, result);
                }
            }
        } else if (node.isArray()) {
            for (JsonNode arrayElement : node) {
                recursiveSearch(arrayElement, key, result);
            }
        }
    }

    /**
     * Extracts values from nested arrays based on a specific JSONPath-like expression.
     * This method is used to handle JSON paths like $..upstreamDatasetElements[0].datasetElementNames[0].
     *
     * @param rootNode the root JSON node
     * @param jsonPath the JSON path to extract values from
     * @return a list of values found at the specified path
     */
    public List<String> extractNestedValues(JsonNode rootNode, String jsonPath) {
        List<String> result = new ArrayList<>();

        // Remove the leading "$." from the JSONPath
        jsonPath = jsonPath.startsWith("$.") ? jsonPath.substring(2) : jsonPath;

        // Split the path into individual components
        String[] pathComponents = jsonPath.split("\\.");

        JsonNode currentNode = rootNode;
        for (String component : pathComponents) {
            if (component.matches(".*\\[\\d+\\]")) {
                String fieldName = component.substring(0, component.indexOf('['));
                int index = Integer.parseInt(component.replaceAll("[^\\d]", ""));
                currentNode = currentNode.path(fieldName);
                if (currentNode.isArray() && currentNode.size() > index) {
                    currentNode = currentNode.get(index);
                } else {
                    return result; // Invalid array index
                }
            } else if (component.matches(".*\\[\\*\\]")) {
                String fieldName = component.substring(0, component.indexOf('['));
                currentNode = currentNode.path(fieldName);
                if (currentNode.isArray()) {
                    Iterator<JsonNode> elements = currentNode.elements();
                    while (elements.hasNext()) {
                        result.add(elements.next().asText());
                    }
                }
                return result;
            } else if (component.contains("[*]")) {
                currentNode = handleWildcard(currentNode, component.replace("[*]", ""));
            } else {
                currentNode = currentNode.path(component);
            }

            // If the node is missing, return empty
            if (currentNode.isMissingNode()) {
                return result;
            }
        }

        // Add the final node's values
        if (currentNode.isValueNode()) {
            result.add(currentNode.asText());
        } else if (currentNode.isArray()) {
            for (JsonNode node : currentNode) {
                result.add(node.asText());
            }
        }

        return result;
    }

    /**
     * Handles wildcard search (e.g., [*]) on arrays.
     *
     * @param node      the JSON node to process
     * @param fieldName the field name to extract from each element
     * @return the processed node with the results
     */
    private JsonNode handleWildcard(JsonNode node, String fieldName) {
        List<String> result = new ArrayList<>();
        if (node.isArray()) {
            for (JsonNode arrayElement : node) {
                if (arrayElement.has(fieldName)) {
                    result.add(arrayElement.path(fieldName).asText());
                }
            }
        }
        return node;
    }
}
