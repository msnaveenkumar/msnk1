import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.util.List;

public class ShadowDOMParser {

    public static void main(String[] args) {
        // Set up the ChromeDriver (ensure you have the appropriate WebDriver installed)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        try {
            // Open the target webpage
            driver.get("your-website-url");

            // JavaScriptExecutor to access Shadow DOM elements
            JavascriptExecutor js = (JavascriptExecutor) driver;

            // Get all elements in the DOM
            List<WebElement> allElements = driver.findElements(By.cssSelector("*"));

            // Traverse through all elements and check if they have shadow roots
            for (WebElement element : allElements) {
                // Try to find a shadow root for each element
                try {
                    Object shadowRoot = js.executeScript("return arguments[0].shadowRoot", element);

                    if (shadowRoot != null) {
                        System.out.println("Shadow root found in element: " + element.getTagName());
                        // Parse all elements inside the shadow root
                        parseShadowRoot(js, shadowRoot);
                    }
                } catch (Exception e) {
                    // Handle any exceptions (like if the element does not have a shadow root)
                    // Just continue the loop
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser after the task
            driver.quit();
        }
    }

    // Recursive method to parse and print elements inside a shadow root
    private static void parseShadowRoot(JavascriptExecutor js, Object shadowRoot) {
        // Get all child elements inside the shadow root
        List<WebElement> shadowElements = (List<WebElement>) js.executeScript(
            "return Array.from(arguments[0].querySelectorAll('*'))", shadowRoot);

        // Print all elements inside the shadow root
        for (WebElement shadowElement : shadowElements) {
            System.out.println("Inside shadow root - Tag: " + shadowElement.getTagName() + ", Attributes: " + shadowElement.getAttribute("outerHTML"));

            // Recursively check if the element itself contains a shadow root
            try {
                Object innerShadowRoot = js.executeScript("return arguments[0].shadowRoot", shadowElement);

                if (innerShadowRoot != null) {
                    System.out.println("Inner shadow root found in element: " + shadowElement.getTagName());
                    // Recursive call to handle nested shadow roots
                    parseShadowRoot(js, innerShadowRoot);
                }
            } catch (Exception e) {
                // Continue in case there are no shadow roots or other issues
            }
        }
    }
}
