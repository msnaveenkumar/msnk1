import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.Optional;
import java.util.stream.StreamSupport;

public class JsonUtility {

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSSSS");

    /**
     * Determines the maturity level based on the acceptance criteria from a JSON node.
     *
     * @param rootNode The root node of the parsed JSON.
     * @return The determined maturity level, or -1 if not found.
     */
    public int determineMaturityLevel(JsonNode rootNode) {
        // Step 1: Check for the most recent "REST" record with Level 1 or 2 and return its level if found
        Optional<JsonNode> restRecord = getLatestRestRecord(rootNode);
        if (restRecord.isPresent()) {
            return restRecord.get().get("maturityLevel").asInt();
        }

        // Step 2: Find the latest record with the lowest maturity level across all types
        Optional<JsonNode> latestRecordWithLowestLevel = getLatestRecordWithLowestLevel(rootNode);
        return latestRecordWithLowestLevel.map(node -> node.get("maturityLevel").asInt()).orElse(-1);
    }

    /**
     * Gets the most recent "REST" record with maturity level 1 or 2.
     *
     * @param rootNode The root node of the parsed JSON.
     * @return Optional node with "REST" ingestionType and maturity level 1 or 2.
     */
    private Optional<JsonNode> getLatestRestRecord(JsonNode rootNode) {
        return StreamSupport.stream(rootNode.spliterator(), false)
            .filter(node -> node.has("maturityLevel") &&
                            (node.get("maturityLevel").asInt() == 1 || node.get("maturityLevel").asInt() == 2) &&
                            node.has("ingestionType") && "REST".equals(node.get("ingestionType").asText()) &&
                            !node.get("disregarded").asBoolean())
            .max(Comparator.comparing(node -> node.get("insertTime").asText()));
    }

    /**
     * Finds the latest record with the lowest maturity level among non-disregarded records.
     *
     * @param rootNode The root node of the parsed JSON.
     * @return Optional node with the latest date and lowest maturity level.
     */
    private Optional<JsonNode> getLatestRecordWithLowestLevel(JsonNode rootNode) {
        return StreamSupport.stream(rootNode.spliterator(), false)
            .filter(node -> node.has("maturityLevel") && !node.get("disregarded").asBoolean())
            .sorted(Comparator.comparing((JsonNode node) -> node.get("maturityLevel").asInt())
                .thenComparing(node -> node.get("insertTime").asText()))
            .findFirst();
    }

    /**
     * Main method to load JSON file, process data, and print the maturity level.
     *
     * @param args Command line arguments.
     */
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java JsonUtility <inputFilePath>");
            return;
        }

        String filePath = args[0];
        ObjectMapper mapper = new ObjectMapper();
        JsonUtility utility = new JsonUtility();

        try {
            // Read and parse the JSON file
            JsonNode rootNode = mapper.readTree(new File(filePath));

            // Determine maturity level
            int maturityLevel = utility.determineMaturityLevel(rootNode);
            System.out.println("Determined Maturity Level: " + maturityLevel);

        } catch (IOException e) {
            System.err.println("Error reading JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
