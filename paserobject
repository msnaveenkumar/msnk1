package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JsonUtility_MS {

    public static void main(String[] args) {
        try {
            // Path to the JSON file
            File jsonFile = new File("test.json");

            // Parse the JSON file
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(jsonFile);

            // Create an instance of JsonUtility to call methods
            JsonUtility_MS jsonUtility = new JsonUtility_MS();

            // Test the methods
            System.out.println(jsonUtility.countItems(rootNode, "SDC Dataset Element PSD_02", "name"));
            // Output: 1

            System.out.println(jsonUtility.countItemsNested(rootNode, "SDC Dataset Element PSD_02", "boundaries", "frontToBack"));
            // Output: 1

            System.out.println(jsonUtility.countItemsNested(rootNode, "SDC Dataset Element PSD_02", "datasetElements", "reportAttributes"));
            // Output: 2

            System.out.println(jsonUtility.countItemsNestedNested(rootNode, "datasets", "SDC Dataset Element PSD_02", "datasetElements", "SDC Dataset Elements PSD_01", "reportAttributes", "catalogId"));
            // Output: 2

            System.out.println(jsonUtility.verifyFieldValue(rootNode, "datasets", "SDC Dataset Element PSD_02", "name"));
            // Output: true

            System.out.println(jsonUtility.verifyFieldValueNested(rootNode, "datasets", "SDC Dataset Element PSD_02", "boundaries", "frontToBack", "Asset Management"));
            // Output: true

            System.out.println(jsonUtility.verifyFieldValueNestedNested(rootNode, "datasets", "SDC Dataset Element PSD_02", "datasetElements", "SDC Dataset Elements PSD_01", "reportAttributes", "catalogId", "e1c336aa-2d99-458d-bc70-d5d25542c739"));
            // Output: true

            List<String> format = jsonUtility.extractFieldValues(rootNode, "SDC Dataset Element PSD_02", "format");
            System.out.println(format);
            // Output: [JSON]

            List<String> description = jsonUtility.extractFieldValues(rootNode, "SDC Dataset Element PSD_02", "description");
            System.out.println(description);
            // Output: [Testing Description in RightContainer SDH]

            List<String> frontToBack = jsonUtility.extractFieldValuesNested(rootNode, "SDC Dataset Element PSD_02", "boundaries", "frontToBack");
            System.out.println(frontToBack);
            // Output: [Asset Management]

            List<String> catalogIds = jsonUtility.extractFieldValuesNestedNested(rootNode, "datasets", "SDC Dataset Elements PSD_02", "datasetElements", "SDC Dataset Elements PSD_01", "reportAttributes", "catalogId");
            System.out.println(catalogIds);
            // Output: [e1c336aa-2d99-458d-bc70-d5d25542c739]

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Find dataset by name from the JSON structure.
     * 
     * @param rootNode    The root JSON node.
     * @param datasetName The name of the dataset to find.
     * @return The dataset node if found, otherwise null.
     */
    private JsonNode findDatasetByName(JsonNode rootNode, String datasetName) {
        JsonNode datasets = rootNode.get("datasets");
        if (datasets != null) {
            for (JsonNode dataset : datasets) {
                if (dataset.get("name").asText().equals(datasetName)) {
                    return dataset;
                }
            }
        }
        return null;
    }

    /**
     * Count the occurrences of a specific field in the dataset by name.
     *
     * @param rootNode    The root JSON node.
     * @param datasetName The name of the dataset to search.
     * @param fieldName   The field name to count.
     * @return The count of items found.
     */
    public int countItems(JsonNode rootNode, String datasetName, String fieldName) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        return datasetNode != null && datasetNode.has(fieldName) ? 1 : 0;
    }

    /**
     * Count the occurrences of a nested array field within a dataset.
     *
     * @param rootNode       The root JSON node.
     * @param datasetName    The name of the dataset to search.
     * @param arrayFieldName The name of the array field to count items for.
     * @param nestedFieldName The nested field name inside the array.
     * @return The count of items found.
     */
    public int countItemsNested(JsonNode rootNode, String datasetName, String arrayFieldName, String nestedFieldName) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(arrayFieldName)) {
            JsonNode arrayNode = datasetNode.get(arrayFieldName);
            for (JsonNode item : arrayNode) {
                if (item.has(nestedFieldName)) {
                    return item.get(nestedFieldName).size();
                }
            }
        }
        return 0;
    }

    /**
     * Count items nested in multiple levels of arrays and objects.
     *
     * @param rootNode         The root JSON node.
     * @param datasetArrayName The array name of the datasets.
     * @param datasetName      The name of the dataset to search.
     * @param elementArrayName The name of the element array inside the dataset.
     * @param elementName      The specific element name to search for.
     * @param nestedArrayName  The nested array inside the element.
     * @param fieldName        The name of the field to count inside the nested array.
     * @return The count of items found.
     */
    public int countItemsNestedNested(JsonNode rootNode, String datasetArrayName, String datasetName, String elementArrayName, String elementName, String nestedArrayName, String fieldName) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(elementArrayName)) {
            JsonNode elementArray = datasetNode.get(elementArrayName);
            for (JsonNode element : elementArray) {
                if (element.get("name").asText().equals(elementName) && element.has(nestedArrayName)) {
                    JsonNode nestedArray = element.get(nestedArrayName);
                    return nestedArray.size();
                }
            }
        }
        return 0;
    }

    /**
     * Verify if a specific field in the dataset has the expected value.
     *
     * @param rootNode    The root JSON node.
     * @param datasetArrayName The array name of the datasets.
     * @param datasetName The name of the dataset to search.
     * @param fieldName   The field name to verify.
     * @return true if the field matches the expected value, otherwise false.
     */
    public boolean verifyFieldValue(JsonNode rootNode, String datasetArrayName, String datasetName, String fieldName) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        return datasetNode != null && datasetNode.has(fieldName);
    }

    /**
     * Verify if a specific nested field in an array has the expected value.
     *
     * @param rootNode       The root JSON node.
     * @param datasetArrayName The array name of the datasets.
     * @param datasetName    The name of the dataset to search.
     * @param arrayFieldName The name of the array field.
     * @param nestedFieldName The nested field name to verify.
     * @param expectedValue  The expected value of the field.
     * @return true if the field matches the expected value, otherwise false.
     */
    public boolean verifyFieldValueNested(JsonNode rootNode, String datasetArrayName, String datasetName, String arrayFieldName, String nestedFieldName, String expectedValue) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(arrayFieldName)) {
            JsonNode arrayNode = datasetNode.get(arrayFieldName);
            for (JsonNode item : arrayNode) {
                if (item.has(nestedFieldName) && item.get(nestedFieldName).asText().equals(expectedValue)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Verify if a specific deeply nested field has the expected value.
     *
     * @param rootNode         The root JSON node.
     * @param datasetArrayName The array name of the datasets.
     * @param datasetName      The name of the dataset to search.
     * @param elementArrayName The name of the element array.
     * @param elementName      The name of the element to search.
     * @param nestedArrayName  The name of the nested array.
     * @param fieldName        The name of the field to verify.
     * @param expectedValue    The expected value of the field.
     * @return true if the field matches the expected value, otherwise false.
     */
    public boolean verifyFieldValueNestedNested(JsonNode rootNode, String datasetArrayName, String datasetName, String elementArrayName, String elementName, String nestedArrayName, String fieldName, String expectedValue) {
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(elementArrayName)) {
            JsonNode elementArray = datasetNode.get(elementArrayName);
            for (JsonNode element : elementArray) {
                if (element.get("name").asText().equals(elementName) && element.has(nestedArrayName)) {
                    JsonNode nestedArray = element.get(nestedArrayName);
                    for (JsonNode nestedElement : nestedArray) {
                        if (nestedElement.has(fieldName) && nestedElement.get(fieldName).asText().equals(expectedValue)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Extract the values of a specific field in the dataset.
     *
     * @param rootNode    The root JSON node.
     * @param datasetName The name of the dataset to search.
     * @param fieldName   The field name to extract.
     * @return A list of values extracted from the specified field.
     */
    public List<String> extractFieldValues(JsonNode rootNode, String datasetName, String fieldName) {
        List<String> values = new ArrayList<>();
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(fieldName)) {
            values.add(datasetNode.get(fieldName).asText());
        }
        return values;
    }

    /**
     * Extract the values of a specific nested field within an array in the dataset.
     *
     * @param rootNode       The root JSON node.
     * @param datasetName    The name of the dataset to search.
     * @param arrayFieldName The name of the array field.
     * @param nestedFieldName The nested field name to extract values from.
     * @return A list of values extracted from the nested field.
     */
    public List<String> extractFieldValuesNested(JsonNode rootNode, String datasetName, String arrayFieldName, String nestedFieldName) {
        List<String> values = new ArrayList<>();
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(arrayFieldName)) {
            JsonNode arrayNode = datasetNode.get(arrayFieldName);
            for (JsonNode item : arrayNode) {
                if (item.has(nestedFieldName)) {
                    values.add(item.get(nestedFieldName).asText());
                }
            }
        }
        return values;
    }

    /**
     * Extract the values of a specific deeply nested field within an array inside another array.
     *
     * @param rootNode         The root JSON node.
     * @param datasetArrayName The array name of the datasets.
     * @param datasetName      The name of the dataset to search.
     * @param elementArrayName The name of the element array inside the dataset.
     * @param elementName      The name of the element to search.
     * @param nestedArrayName  The name of the nested array inside the element.
     * @param fieldName        The name of the field to extract values from.
     * @return A list of values extracted from the deeply nested field.
     */
    public List<String> extractFieldValuesNestedNested(JsonNode rootNode, String datasetArrayName, String datasetName, String elementArrayName, String elementName, String nestedArrayName, String fieldName) {
        List<String> values = new ArrayList<>();
        JsonNode datasetNode = findDatasetByName(rootNode, datasetName);
        if (datasetNode != null && datasetNode.has(elementArrayName)) {
            JsonNode elementArray = datasetNode.get(elementArrayName);
            for (JsonNode element : elementArray) {
                if (element.get("name").asText().equals(elementName) && element.has(nestedArrayName)) {
                    JsonNode nestedArray = element.get(nestedArrayName);
                    for (JsonNode nestedElement : nestedArray) {
                        if (nestedElement.has(fieldName)) {
                            values.add(nestedElement.get(fieldName).asText());
                        }
                    }
                }
            }
        }
        return values;
    }
}
